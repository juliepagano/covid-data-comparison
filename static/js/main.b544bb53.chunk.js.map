{"version":3,"sources":["services/covidTrackingService.tsx","components/SquareChart.tsx","components/ScaleChart.tsx","components/DataCharts.tsx","constants/annualDeathStats.ts","constants/otherPandemics.ts","constants/dataTypeOptions.ts","constants/violence.ts","constants/wars.ts","constants/naturalDisasters.ts","constants/impactScales.ts","components/DataContainer.tsx","components/ControlBar.tsx","components/App.tsx","components/Routes.tsx","reportWebVitals.ts","index.tsx"],"names":["BASE_URL","getUSDataByDate","date","a","formattedDate","formatDate","axios","get","getLatestUSData","currentDate","Date","res","response","status","subDays","data","Error","getStateDataByDate","state","toLowerCase","getLatestStateData","getStateMetadata","BOXES_IN_GROUP","BOXES_IN_SECTION","SquareChart","startX","startY","label","value","source","scaleValue","color","highlight","minWidth","maxWidth","boxCount","Math","ceil","maxSectionsWide","floor","BOX_STROKE_WIDTH","GROUP_PADDING","sectionCount","sectionColumns","min","sectionRows","calculatedChartHeight","calculatedChartWidth","renderBoxes","startBoxIndex","Array","map","e","boxRow","boxY","boxCol","boxX","boxIndex","max","fill","fillOpacity","stroke","strokeWidth","width","height","x","y","data-box-key","renderGroups","groupRow","groupY","groupCol","groupX","groupBoxIndex","sections","sectionRow","sectionY","sectionCol","sectionX","sectionBoxIndex","className","style","cx","numbro","format","thousandSeparated","mantissa","href","ScaleChart","entries","scale","isCovid","otherEntry","dataType","DataCharts","chartScales","length","annualDeathStats","otherPandemics","dataTypeOptions","name","violence","wars","naturalDisasters","IMPACT_SCALES","COVID_ENTRIES","dataKey","reversedImpactScales","reverse","getMatchingScale","find","DataContainer","optionsConfig","useState","setChartScales","filteredChartScales","setFilteredChartScales","useEffect","scaleMap","reduce","result","set","Map","processData","dataToProcess","forEach","otherData","matchingScale","usResult","stateMeta","Promise","all","state_code","stateResult","newChartScales","otherScale","combinedEntries","sort","b","fetchData","allowedDataTypes","push","newFilteredChartScales","filter","includes","ControlBar","history","useHistory","location","useLocation","type","onClick","query","qs","parse","search","ignoreQueryPrefix","currentTarget","checked","toString","pathname","stringify","onClickCheckbox","App","setOptionsConfig","queryString","newOptionsConfig","Routes","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b544bb53.chunk.js","sourcesContent":["import axios from \"axios\";\nimport formatDate from \"date-fns/format\";\nimport subDays from \"date-fns/subDays\";\n\nconst BASE_URL = \"https://api.covidtracking.com/v2beta\";\n\nasync function getUSDataByDate(date: Date) {\n  const formattedDate = formatDate(date, \"yyyy-MM-dd\");\n  return axios.get(`${BASE_URL}/us/daily/${formattedDate}.json`);\n}\n\nexport async function getLatestUSData() {\n  const currentDate = new Date();\n\n  let res;\n  try {\n    // Try today\n    res = await getUSDataByDate(currentDate);\n  } catch (e) {\n    if (e?.response?.status === 404) {\n      // Try yesterday if today is not ready yet\n      try {\n        res = await getUSDataByDate(subDays(currentDate, 1));\n      } catch (e) {\n        // do something\n      }\n    }\n  }\n\n  if (res?.data?.data) {\n    return res?.data?.data;\n  }\n\n  throw new Error(\"Unable to load latest US data.\");\n}\n\nasync function getStateDataByDate(state: string, date: Date) {\n  const formattedDate = formatDate(date, \"yyyy-MM-dd\");\n  return axios.get(\n    `${BASE_URL}/states/${state.toLowerCase()}/${formattedDate}.json`\n  );\n}\n\nexport async function getLatestStateData(state: string) {\n  const currentDate = new Date();\n\n  let res;\n  try {\n    // Try today\n    res = await getStateDataByDate(state, currentDate);\n  } catch (e) {\n    if (e?.response?.status === 404) {\n      // Try yesterday if today is not ready yet\n      try {\n        res = await getStateDataByDate(state, subDays(currentDate, 1));\n      } catch (e) {\n        // do something\n      }\n    }\n  }\n\n  if (res?.data?.data) {\n    return res?.data?.data;\n  }\n\n  throw new Error(`Unable to load latest ${state} data.`);\n}\n\nexport async function getStateMetadata() {\n  let res;\n  try {\n    res = await axios.get(`${BASE_URL}/states.json`);\n  } catch (e) {\n    // Something went wrong\n  }\n\n  if (res?.data?.data) {\n    return res?.data?.data;\n  }\n\n  throw new Error(\"Unable to load state metadata.\");\n}\n","import React, { Fragment } from \"react\";\nimport numbro from \"numbro\";\nimport cx from \"classnames\";\n\nimport \"./SquareChart.scss\";\n\ninterface SquareChartProps {\n  label: string;\n  value: number;\n  source?: string;\n  scaleValue: number;\n  color?: string;\n  highlight?: boolean;\n  minWidth?: number;\n  maxWidth?: number;\n}\n\n// Box size in pixels\nconst BOX_SIZE_PX = 8;\nconst BOX_PADDING = 3;\nconst BOX_STROKE_WIDTH = 1;\n\n// Group size in number of boxes\nconst GROUP_SIZE = 5;\nconst BOXES_IN_GROUP = GROUP_SIZE ** 2;\nconst GROUP_PADDING = BOX_PADDING * 2;\nconst GROUP_SIZE_PX = BOX_SIZE_PX * GROUP_SIZE + BOX_PADDING * (GROUP_SIZE - 1);\n\n// Section size in number of groups\nconst SECTION_SIZE = 2;\nconst GROUPS_IN_SECTION = SECTION_SIZE ** 2;\nconst BOXES_IN_SECTION = GROUPS_IN_SECTION * BOXES_IN_GROUP;\nconst SECTION_PADDING = GROUP_PADDING * 2;\nconst SECTION_SIZE_PX =\n  GROUP_SIZE_PX * SECTION_SIZE + GROUP_PADDING * (SECTION_SIZE - 1);\n\nfunction SquareChart({\n  label,\n  value,\n  source,\n  scaleValue,\n  color,\n  highlight,\n  minWidth = 250,\n  maxWidth = 500,\n}: SquareChartProps) {\n  const boxCount = Math.ceil(value / scaleValue);\n  const maxSectionsWide = Math.floor(\n    (maxWidth - BOX_STROKE_WIDTH * 2 + SECTION_PADDING) /\n      (SECTION_SIZE_PX + SECTION_PADDING)\n  );\n\n  const sectionCount = Math.ceil(boxCount / BOXES_IN_SECTION);\n  const sectionColumns = Math.min(maxSectionsWide, sectionCount);\n  const sectionRows = Math.ceil(sectionCount / sectionColumns);\n\n  // const chartWidth =\n  //   sectionColumns * SECTION_SIZE_PX +\n  //   SECTION_PADDING * (sectionColumns - 1) +\n  //   BOX_STROKE_WIDTH * 2;\n\n  // const chartHeight =\n  //   sectionRows * SECTION_SIZE_PX +\n  //   SECTION_PADDING * (sectionRows - 1) +\n  //   BOX_STROKE_WIDTH * 2;\n\n  let calculatedChartHeight = 0;\n  let calculatedChartWidth = 0;\n\n  const renderBoxes = (\n    startX: number,\n    startY: number,\n    startBoxIndex: number,\n    boxCount: number\n  ) => {\n    return [...Array(GROUP_SIZE)].map((e, boxRow) => {\n      const boxY = startY + boxRow * (BOX_SIZE_PX + BOX_PADDING);\n\n      return [...Array(GROUP_SIZE)].map((e, boxCol) => {\n        const boxX = startX + boxCol * (BOX_SIZE_PX + BOX_PADDING);\n        const boxIndex = startBoxIndex + boxRow * GROUP_SIZE + boxCol;\n\n        if (boxIndex >= boxCount) {\n          return null;\n        }\n\n        calculatedChartHeight = boxY + BOX_SIZE_PX + BOX_STROKE_WIDTH;\n        calculatedChartWidth = Math.max(\n          boxX + BOX_SIZE_PX + BOX_STROKE_WIDTH,\n          calculatedChartWidth\n        );\n\n        return (\n          <Fragment key={boxIndex}>\n            <rect\n              fill={color}\n              fillOpacity={0.5}\n              stroke=\"#000\"\n              strokeWidth={BOX_STROKE_WIDTH}\n              width={BOX_SIZE_PX}\n              height={BOX_SIZE_PX}\n              x={boxX}\n              y={boxY}\n              data-box-key={boxIndex}\n            />\n          </Fragment>\n        );\n      });\n    });\n  };\n\n  const renderGroups = (\n    startX: number,\n    startY: number,\n    startBoxIndex: number,\n    boxCount: number\n  ) => {\n    return [...Array(SECTION_SIZE)].map((e, groupRow) => {\n      const groupY = startY + groupRow * (GROUP_SIZE_PX + GROUP_PADDING);\n\n      return [...Array(SECTION_SIZE)].map((e, groupCol) => {\n        const groupX = startX + groupCol * (GROUP_SIZE_PX + GROUP_PADDING);\n        const groupBoxIndex =\n          startBoxIndex + (groupRow * SECTION_SIZE + groupCol) * BOXES_IN_GROUP;\n\n        if (groupBoxIndex >= boxCount) {\n          return null;\n        }\n\n        return (\n          <Fragment key={groupBoxIndex}>\n            {/* <rect\n              fill=\"none\"\n              width={GROUP_SIZE_PX}\n              height={GROUP_SIZE_PX}\n              x={groupX}\n              y={groupY}\n              data-group-key={groupBoxIndex}\n            /> */}\n            {renderBoxes(groupX, groupY, groupBoxIndex, boxCount)}\n          </Fragment>\n        );\n      });\n    });\n  };\n\n  const renderSections = (startX: number, startY: number) => {\n    return [...Array(sectionRows)].map((e, sectionRow) => {\n      const sectionY =\n        startY + sectionRow * (SECTION_SIZE_PX + SECTION_PADDING);\n\n      return [...Array(sectionColumns)].map((e, sectionCol) => {\n        const sectionX =\n          startX + sectionCol * (SECTION_SIZE_PX + SECTION_PADDING);\n        const sectionBoxIndex =\n          (sectionRow * sectionColumns + sectionCol) * BOXES_IN_SECTION;\n\n        if (sectionBoxIndex >= boxCount) {\n          return null;\n        }\n\n        return (\n          <Fragment key={sectionBoxIndex}>\n            {/* <rect\n              fill=\"none\"\n              width={SECTION_SIZE_PX}\n              height={SECTION_SIZE_PX}\n              x={sectionX}\n              y={sectionY}\n              data-section-key={sectionBoxIndex}\n            /> */}\n            {renderGroups(sectionX, sectionY, sectionBoxIndex, boxCount)}\n          </Fragment>\n        );\n      });\n    });\n  };\n\n  const sections = renderSections(BOX_STROKE_WIDTH, BOX_STROKE_WIDTH);\n\n  return (\n    <figure className=\"SquareChart\" style={{ minWidth }}>\n      <figcaption>\n        <span className={cx({ highlight: highlight })}>\n          {label} (\n          {numbro(value).format({\n            thousandSeparated: true,\n            mantissa: 0,\n          })}\n          ){\" \"}\n        </span>\n        {source && (\n          <span className=\"SquareChart-source\">\n            [<a href={source}>source</a>]\n          </span>\n        )}\n      </figcaption>\n      <svg width={calculatedChartWidth} height={calculatedChartHeight}>\n        {sections}\n      </svg>\n    </figure>\n  );\n}\n\nexport default SquareChart;\n","import React from \"react\";\nimport SquareChart from \"./SquareChart\";\nimport numbro from \"numbro\";\n\nimport \"./ScaleChart.scss\";\n\ntype ScaleChartProps = ImpactScale;\n\nconst ScaleChart = ({ entries, scale, color }: ScaleChartProps) => {\n  return (\n    <section className=\"ScaleChart\">\n      <h2>\n        {numbro(scale).format({\n          thousandSeparated: true,\n          mantissa: 0,\n        })}\n      </h2>\n      {entries.map(({ label, isCovid, dataType, ...otherEntry }) => {\n        return (\n          <SquareChart\n            key={label}\n            label={label}\n            scaleValue={scale}\n            color={color}\n            highlight={isCovid}\n            {...otherEntry}\n          />\n        );\n      })}\n    </section>\n  );\n};\n\nexport default ScaleChart;\n","import React from \"react\";\nimport ScaleChart from \"./ScaleChart\";\n\nimport \"./DataCharts.scss\";\n\ninterface DataChartsProps {\n  chartScales: ImpactScale[];\n}\n\nconst DataCharts = ({ chartScales }: DataChartsProps) => {\n  return (\n    <div className=\"DataCharts\">\n      {chartScales.map(({ color, scale, entries }) => {\n        if (!entries.length) {\n          return null;\n        }\n\n        return (\n          <ScaleChart\n            key={scale}\n            color={color}\n            scale={scale}\n            entries={entries}\n          />\n        );\n      })}\n    </div>\n  );\n};\nexport default DataCharts;\n","const annualDeathStats = [\n  {\n    label: \"US motor vehicle traffic deaths in 2019\",\n    value: 37595,\n    source: \"https://www.cdc.gov/nchs/fastats/accidental-injury.htm\",\n  },\n  {\n    label: \"Deaths from flu and pneumonia in 2019\",\n    value: 49783,\n    source: \"https://www.cdc.gov/nchs/fastats/flu.htm\",\n  },\n  {\n    label: \"Deaths from homicide in 2019\",\n    value: 19141,\n    source: \"https://www.cdc.gov/nchs/fastats/homicide.htm\",\n  },\n  {\n    label: \"Unintentional injury deaths in 2019\",\n    value: 173040,\n    source: \"https://www.cdc.gov/nchs/fastats/accidental-injury.htm\",\n  },\n];\nexport default annualDeathStats;\n","const otherPandemics = [\n  {\n    label: \"HIV/AIDS in the US as of 2018\",\n    value: 700000,\n    source: \"https://www.kff.org/\",\n  },\n  {\n    label: \"1918 Spanish Flu in the US\",\n    value: 675000,\n    source:\n      \"https://www.cdc.gov/flu/pandemic-resources/1918-pandemic-h1n1.html\",\n  },\n];\nexport default otherPandemics;\n","const dataTypeOptions: DataTypeOptions[] = [\n  {\n    label: \"US Covid Data\",\n    name: \"showUS\",\n    dataType: \"US_COVID\",\n  },\n  {\n    label: \"State Covid Data\",\n    name: \"showStates\",\n    dataType: \"STATE_COVID\",\n  },\n  {\n    label: \"Annual US Death Stats\",\n    name: \"showAnnualDeaths\",\n    dataType: \"ANNUAL_DEATH_STATS\",\n  },\n  {\n    label: \"Other pandemics\",\n    name: \"showPandemics\",\n    dataType: \"OTHER_PANDEMICS\",\n  },\n  {\n    label: \"Wars\",\n    name: \"showWars\",\n    dataType: \"WARS\",\n  },\n  {\n    label: \"Natural Disasters\",\n    name: \"showNaturalDisasters\",\n    dataType: \"NATURAL_DISASTERS\",\n  },\n  {\n    label: \"Terrorism and other acts of violence\",\n    name: \"showViolence\",\n    dataType: \"VIOLENCE\",\n  },\n];\nexport default dataTypeOptions;\n","const violence = [\n  {\n    label: \"9/11\",\n    value: 2996,\n  },\n  {\n    label: \"Jonestown\",\n    value: 918,\n  },\n  { label: \"Columbine\", value: 15 },\n  {\n    label: \"Waco siege\",\n    value: 86,\n  },\n  {\n    label: \"Oklahoma City Bombings\",\n    value: 168,\n  },\n];\nexport default violence;\n","const wars = [\n  {\n    label: \"US deaths in Vietnam War\",\n    value: 58209,\n  },\n  {\n    label: \"Attack on Pearl Harbor\",\n    value: 2467,\n  },\n  {\n    label: \"US deaths in Iraq War\",\n    value: 4497,\n  },\n  {\n    label: \"Deaths in US Civil War\",\n    value: 655000,\n  },\n  {\n    label: \"US deaths in WWII\",\n    value: 405399,\n  },\n  {\n    label: \"US deaths in WWI\",\n    value: 116516,\n  },\n];\nexport default wars;\n","const naturalDisasters = [\n  {\n    label: \"Hurricane Katrina\",\n    value: 1833,\n  },\n];\nexport default naturalDisasters;\n","const IMPACT_SCALES: ImpactScale[] = [\n  {\n    color: \"green\",\n    scale: 1,\n    entries: [],\n  },\n  {\n    color: \"blue\",\n    scale: 10,\n    entries: [],\n  },\n  {\n    color: \"orange\",\n    scale: 1000,\n    entries: [],\n  },\n  {\n    color: \"black\",\n    scale: 100000,\n    entries: [],\n  },\n];\nexport default IMPACT_SCALES;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  getLatestUSData,\n  getStateMetadata,\n  getLatestStateData,\n} from \"../services/covidTrackingService\";\nimport get from \"lodash.get\";\nimport DataCharts from \"./DataCharts\";\nimport annualDeathStats from \"../constants/annualDeathStats\";\nimport otherPandemics from \"../constants/otherPandemics\";\nimport dataTypeOptions from \"../constants/dataTypeOptions\";\nimport violence from \"../constants/violence\";\nimport wars from \"../constants/wars\";\nimport naturalDisasters from \"../constants/naturalDisasters\";\nimport IMPACT_SCALES from \"../constants/impactScales\";\n\nconst COVID_ENTRIES = [\n  {\n    label: \"Total deaths from Covid\",\n    dataKey: \"outcomes.death.total.value\",\n  },\n  {\n    label: \"Today's deaths from Covid\",\n    dataKey: \"outcomes.death.total.calculated.change_from_prior_day\",\n  },\n];\n\nconst reversedImpactScales = [...IMPACT_SCALES].reverse();\n\nfunction getMatchingScale(value: number) {\n  return reversedImpactScales.find((scale) => value >= scale.scale);\n}\n\ninterface DataContainerProps {\n  optionsConfig: OptionsConfig;\n}\n\nfunction DataContainer({ optionsConfig }: DataContainerProps) {\n  const [chartScales, setChartScales] = useState<ImpactScale[]>();\n  const [filteredChartScales, setFilteredChartScales] = useState<\n    ImpactScale[]\n  >();\n\n  useEffect(() => {\n    async function fetchData() {\n      const scaleMap = IMPACT_SCALES.reduce((result, { scale }) => {\n        result.set(scale, []);\n        return result;\n      }, new Map());\n\n      const processData = (dataToProcess: ChartEntry[], dataType: string) => {\n        dataToProcess.forEach(({ value, ...otherData }) => {\n          if (typeof value !== \"number\") {\n            return;\n          }\n          const matchingScale = getMatchingScale(value);\n          if (matchingScale) {\n            scaleMap.set(matchingScale.scale, [\n              ...scaleMap.get(matchingScale.scale),\n              {\n                ...otherData,\n                value: value,\n                isCovid: false,\n                dataType: dataType,\n              },\n            ]);\n          }\n        });\n      };\n\n      processData(annualDeathStats, \"ANNUAL_DEATH_STATS\");\n      processData(otherPandemics, \"OTHER_PANDEMICS\");\n      processData(violence, \"VIOLENCE\");\n      processData(wars, \"WARS\");\n      processData(naturalDisasters, \"NATURAL_DISASTERS\");\n\n      try {\n        const usResult = await getLatestUSData();\n\n        COVID_ENTRIES.forEach(({ label, dataKey }) => {\n          const value = get(usResult, dataKey);\n\n          if (typeof value === \"number\") {\n            const matchingScale = getMatchingScale(value);\n            if (matchingScale) {\n              scaleMap.set(matchingScale.scale, [\n                ...scaleMap.get(matchingScale.scale),\n                {\n                  label: `US: ${label}`,\n                  value: value,\n                  isCovid: true,\n                  dataType: \"US_COVID\",\n                  source: \"https://covidtracking.com/\",\n                },\n              ]);\n            }\n          }\n        });\n      } catch (e) {\n        // error\n      }\n\n      try {\n        const stateMeta = await getStateMetadata();\n\n        const stateResults = await Promise.all(\n          stateMeta.map(({ state_code }: { state_code: string }) => {\n            return getLatestStateData(state_code);\n          })\n        );\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        stateResults.forEach((stateResult: any) => {\n          const state: string = stateResult.state;\n\n          COVID_ENTRIES.forEach(({ label, dataKey }) => {\n            const value = get(stateResult, dataKey);\n\n            if (typeof value === \"number\") {\n              const matchingScale = getMatchingScale(value);\n              if (matchingScale) {\n                scaleMap.set(matchingScale.scale, [\n                  ...scaleMap.get(matchingScale.scale),\n                  {\n                    label: `${state}: ${label}`,\n                    value: value,\n                    isCovid: true,\n                    dataType: \"STATE_COVID\",\n                    source: \"https://covidtracking.com/\",\n                  },\n                ]);\n              }\n            }\n          });\n        });\n      } catch (e) {\n        // error\n      }\n\n      const newChartScales = IMPACT_SCALES.map(\n        ({ entries, scale, ...otherScale }) => {\n          const combinedEntries = [...entries, ...scaleMap.get(scale)].sort(\n            (a, b) => a.value - b.value\n          );\n\n          return {\n            ...otherScale,\n            scale,\n            entries: combinedEntries,\n          };\n        }\n      );\n      setChartScales(newChartScales);\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (!chartScales) {\n      return;\n    }\n\n    const allowedDataTypes: ChartEntry[\"dataType\"][] = [\"OTHER\"];\n    dataTypeOptions.forEach(({ name, dataType }) => {\n      if (optionsConfig[name]) {\n        allowedDataTypes.push(dataType);\n      }\n    });\n\n    const newFilteredChartScales = chartScales.map(\n      ({ entries, ...otherScale }) => {\n        return {\n          ...otherScale,\n          entries: entries.filter(({ dataType = \"OTHER\" }) => {\n            return allowedDataTypes.includes(dataType);\n          }),\n        };\n      }\n    );\n    setFilteredChartScales(newFilteredChartScales);\n  }, [chartScales, optionsConfig]);\n\n  if (!filteredChartScales) {\n    return null;\n  }\n\n  return <DataCharts chartScales={filteredChartScales} />;\n}\n\nexport default DataContainer;\n","import React, { FormEvent } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport qs from \"qs\";\nimport dataTypeOptions from \"../constants/dataTypeOptions\";\n\nimport \"./ControlBar.scss\";\n\nconst ControlBar = () => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const onClickCheckbox = (name: string, e: FormEvent<HTMLInputElement>) => {\n    const query = qs.parse(location.search, { ignoreQueryPrefix: true });\n    query[name] = e.currentTarget.checked.toString();\n\n    history.push({\n      pathname: location.pathname,\n      search: qs.stringify(query),\n    });\n  };\n\n  return (\n    <header className=\"ControlBar\">\n      {dataTypeOptions.map(({ label, name }) => {\n        return (\n          <label key={name}>\n            {label}\n            <input\n              type=\"checkbox\"\n              name={name}\n              onClick={(e) => onClickCheckbox(name, e)}\n            />\n          </label>\n        );\n      })}\n    </header>\n  );\n};\nexport default ControlBar;\n","import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport DataContainer from \"./DataContainer\";\nimport ControlBar from \"./ControlBar\";\nimport qs from \"qs\";\nimport dataTypeOptions from \"../constants/dataTypeOptions\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  const location = useLocation();\n\n  const [optionsConfig, setOptionsConfig] = useState<OptionsConfig>();\n\n  useEffect(() => {\n    const queryString = qs.parse(location.search, { ignoreQueryPrefix: true });\n\n    const newOptionsConfig: OptionsConfig = dataTypeOptions.reduce(\n      (result, { label, name }) => {\n        result[name] = queryString[name] === \"true\";\n        return result;\n      },\n      {} as OptionsConfig\n    );\n    setOptionsConfig(newOptionsConfig);\n  }, [location]);\n\n  return (\n    <div className=\"App\">\n      <ControlBar />\n      <div className=\"App-content\">\n        {optionsConfig && <DataContainer optionsConfig={optionsConfig} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport App from \"./App\";\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Route path=\"/\">\n        <App />\n      </Route>\n    </Router>\n  );\n};\nexport default Routes;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport Routes from \"./components/Routes\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}